"use strict"; const phoneToggle = document.getElementById("phone-toggle"), phoneListItems = document.querySelectorAll(".header-phone-list li"); phoneToggle && phoneToggle.addEventListener("click", function () { this.closest(".header-phone").classList.toggle("active") }), phoneListItems && phoneListItems.forEach(function (e) { e.addEventListener("click", function () { if (!this.classList.contains("current")) { const e = document.querySelector(".header-phone-current > a"); document.querySelector(".header-phone-list li.current").classList.remove("current"), document.querySelector(".header-phone-current-mobile").setAttribute("href", "tel:" + this.querySelector("span:last-child").innerText), document.querySelector(".header-phone-current-mobile").innerText = this.querySelector("span:last-child").innerText, e.setAttribute("href", "tel:" + this.querySelector("span:last-child").innerText), e.innerHTML = this.innerHTML, this.classList.add("current"), phoneToggle.click() } }) }); const breakpoint = window.matchMedia("(min-width: 1000px)"), breakpointMd = window.matchMedia("(max-width: 767px)"); let solareSlider; const breakpointChecker = function () { if (!0 === breakpoint.matches || 1 == breakpointMd.matches) void 0 !== solareSlider && solareSlider.destroy(!0, !0); else if (!1 === breakpoint.matches) return enableSwiper() }, enableSwiper = function () { const e = document.querySelectorAll(".solare-slider"); e && e.forEach(function (e) { solareSlider = new Swiper(e, { spaceBetween: 15, slidesPerView: "auto", a11y: !1, keyboardControl: !0, grabCursor: !0 }) }) }; function removeServiceInfo() { $(".enroll-form").find(".add-info").remove() } function validate(e) { const t = e.find("input, textarea"); let i = !1; return $(t).on("focus", function () { $(this).parents(".form-group").hasClass("error") && ($(this).parents(".form-group").removeClass("error"), $(this).parents(".form-group").find("span.error").remove()) }), t.each(function (e, t) { var n = t.getAttribute("type"); t.hasAttribute("required") && "" == t.value ? (addValidationError(t, "form-group", "Данное поле не может быть пустым", "not-filled"), i = !0) : "email" != n || "" == t.value || validateEmail(t.value) || (addValidationError(t, "form-group", "Некорректный формат email"), i = !0) }), i } function addValidationError(e, t, n, i = "") { $(e).parents("." + t).hasClass("error") || $(e).parents("." + t).addClass("error " + i).append('<span class="error">' + n + "</span>") } function validateEmail(e) { return /\S+@\S+\.\S+/.test(e) } breakpointChecker(), window.addEventListener("resize", function () { breakpointChecker() }), $(".faq-item-heading, .faq-item-button").on("click", function () { $(this).parents(".faq-item").toggleClass("active"), $(this).parents(".faq-item").find(".faq-item-content").slideToggle() }), $(".open-modal").on("click", function () {
    var e = $(this).data("modal"); if ($("#" + e)) {
        const i = $("#" + e); if (i.addClass("active"), $(this).parents(".card").length) {
            const r = $(this).parents(".card"); var t = $(this).index(), n = r.find(".card-title").text(), e = r.find(".card-prices span").eq(t).text(), t = $(this).text(); $(i).find("form .add-info").length && $(i).find("form .add-info").remove(); t = `
            <div class="add-info">
                <input type="hidden" name="service_title" value="${n}">
                <input type="hidden" name="service_price" value="${e}">
                <input type="hidden" name="service_times" value="${t}">
            </div
            `; i.find("form").append(t)
        } if ($(this).parents(".features-card").length) {
            const a = $(this).parents(".features-card"); t = a.find(".features-card-title").text(); console.log(1); t = `
            <div class="add-info">
                <input type="hidden" name="service_title" value="${t}">
            </div
            `; i.find("form").append(t)
        }
    }
}), $(".modal-close").on("click", function () { $(this).parents(".modal").removeClass("active"), removeServiceInfo() }), $(".nav-toggle:not(.mobile)").on("click", function () { $(".header-nav").slideToggle(), $(this).toggleClass("active"), $(this).hasClass("active") || $(".header-nav").find("li.active").find("button").trigger("click") }), $(".nav-toggle.mobile").on("click", function () { $(".mobile-nav").toggleClass("active") }), $(".mobile-nav .menu-item-has-children div span").on("click", function () { $(this).parents("li").toggleClass("active"), $(this).parents("li").find("ul").slideToggle() }), $(".submenu-toggle").on("click", function () { const e = $(this).parents("li"); var t = $(this).parents("li").data("children"); $("ul[data-parent=" + t + "]") && ($(this).parents(".header-nav-top").find("li").not(e).removeClass("active"), e.toggleClass("active"), $(".header-nav-submenu").not($("ul[data-parent=" + t + "]")).slideUp(), $("ul[data-parent=" + t + "]").slideToggle()) }), $(".enroll-modal").on("click", function (e) { e.target.closest(".modal-inner") || ($(".enroll-modal").removeClass("active"), removeServiceInfo()) }), $("#enroll-form, #footer-form").on("submit", function (e) { const t = $(this); validate(t) || t.find(".error").length, e.preventDefault() });